/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ConnectImport } from './routes/connect'
import { Route as AppImport } from './routes/app'
import { Route as ChannelChannelIdImport } from './routes/channel/$channelId'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const ConnectRoute = ConnectImport.update({
  id: '/connect',
  path: '/connect',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ChannelChannelIdRoute = ChannelChannelIdImport.update({
  id: '/channel/$channelId',
  path: '/channel/$channelId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/connect': {
      id: '/connect'
      path: '/connect'
      fullPath: '/connect'
      preLoaderRoute: typeof ConnectImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/channel/$channelId': {
      id: '/channel/$channelId'
      path: '/channel/$channelId'
      fullPath: '/channel/$channelId'
      preLoaderRoute: typeof ChannelChannelIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/app': typeof AppRoute
  '/connect': typeof ConnectRoute
  '/about': typeof AboutLazyRoute
  '/channel/$channelId': typeof ChannelChannelIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/app': typeof AppRoute
  '/connect': typeof ConnectRoute
  '/about': typeof AboutLazyRoute
  '/channel/$channelId': typeof ChannelChannelIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/app': typeof AppRoute
  '/connect': typeof ConnectRoute
  '/about': typeof AboutLazyRoute
  '/channel/$channelId': typeof ChannelChannelIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/app' | '/connect' | '/about' | '/channel/$channelId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app' | '/connect' | '/about' | '/channel/$channelId'
  id: '__root__' | '/' | '/app' | '/connect' | '/about' | '/channel/$channelId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AppRoute: typeof AppRoute
  ConnectRoute: typeof ConnectRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ChannelChannelIdRoute: typeof ChannelChannelIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AppRoute: AppRoute,
  ConnectRoute: ConnectRoute,
  AboutLazyRoute: AboutLazyRoute,
  ChannelChannelIdRoute: ChannelChannelIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/connect",
        "/about",
        "/channel/$channelId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/app": {
      "filePath": "app.tsx"
    },
    "/connect": {
      "filePath": "connect.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/channel/$channelId": {
      "filePath": "channel/$channelId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
